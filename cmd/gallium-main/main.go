package main

import (
	"bytes"
	"flag"
	"go/format"
	"log"
	"os"
	"text/template"
)

func main() {
	flag.Parse()

	var buf bytes.Buffer
	if err := tpl.Execute(&buf, struct{ Package string }{flag.Arg(0)}); err != nil {
		log.Fatal(err)
	}

	code, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}

	f, err := os.Create("main.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	if _, err := f.Write(code); err != nil {
		log.Fatal(err)
	}
}

var tpl = template.Must(template.New("main").Parse(`/*
* CODE AUTOMATICALLY GENERATED BY gallium-main
* NEVER EDIT THIS CODE BY HAND
*/
package main

import (
	"os"
	"runtime"

	"github.com/alexflint/gallium"
	{{if .Package}}
	app "{{.Package}}"
	{{end}}
)

func main() {
	runtime.LockOSThread()
	gallium.RedirectStdoutStderr(os.ExpandEnv("$HOME/Library/Logs/Gallium.log"))
	{{if .Package}}
	gallium.Loop(os.Args, app.New())
	{{else}}
	gallium.Loop(os.Args, New())
	{{end}}
}`))
